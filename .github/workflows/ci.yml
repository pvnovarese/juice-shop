name: "CI/CD Pipeline"
on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Manual Build'  

      
env:
  ANGULAR_CLI_VERSION: 13
  REGISTRY: ghcr.io

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    
      - name: "Set IMAGE environmental variables"
        run: |
          echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV    
    
      - name: Checkout Code
        uses: actions/checkout@v3        
            
      #### it's not really necessary to build the image every time and it adds about five minutes
            
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}     
          
      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v2
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: build local container
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64        
          tags: ${{ env.IMAGE }}
          push: true
          load: false  
          build-args: |
            VCS_REF=${{ env.VCS_REF }}
            BUILD_DATE=${{ env.BUILD_DATE }}
          
  smoke-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: "Check out Git repository"
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f #v2: v2.3.4 available
      - name: "Execute smoke test on Docker"
        run: |
          docker-compose pull
          docker-compose -f docker-compose.test.yml up --exit-code-from sut
  
  security-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: "Set IMAGE environmental variables"
        run: |
          echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV 
          echo "FAULT_COUNT=0" >> $GITHUB_ENV
      - name: "Install tools"
        run: |
          ### install syft and grype 
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b $HOME/.local/bin v0.84.0
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b $HOME/.local/bin v0.62.3
          export PATH="$HOME/.local/bin/:$PATH"     
      - name: "Generate SBOM"
        run: |
          syft -o json ${IMAGE} > sbom.json
      - name: "Vuln Check"
        # get list of critical vulns and output fixes
        run: | 
          grype -o json --only-fixed sbom:sbom.json | jq '.matches[] | select ( .vulnerability.severity == "Critical" ) | "\(.vulnerability.id) \(.vulnerability.severity) \(.artifact.name) \(.artifact.version) fixed in: \(.vulnerability.fix.versions[])"' | tee matches.txt
          FAULT_COUNT=$(( $FAULT_COUNT + $(wc -l < matches.txt) ))
          echo "FAULT_COUNT=${FAULT_COUNT}" >> $GITHUB_ENV
          echo "Current Fault Count: ${FAULT_COUNT}"
      - name: "GPL License Check"
        run: |
          ### if we want to check for other licenses, just copy this step and change the LICENSE
          LICENSE="GPL" 
          ### selecting for .type != "deb" means we're only looking at language dependencies
          LICENSE_COUNT=$( cat sbom.json | jq --arg LICENSE "${LICENSE}" '[.artifacts[] | select ( .type != "deb") | select ( .licenses[].value | contains($LICENSE))] | length' )
          if [ ${LICENSE_COUNT} -gt 0 ] ; then
            echo "found ${LICENSE_COUNT} dependencies with ${LICENSE} license:"
            cat sbom.json | jq --arg LICENSE "${LICENSE}" '.artifacts[] | select ( .type != "deb") | select ( .licenses[].value | contains($LICENSE)) | "\(.name) \(.version) \(.licenses[].value)"'
            FAULT_COUNT=$(( $FAULT_COUNT + $LICENSE_COUNT ));
            echo "FAULT_COUNT=${FAULT_COUNT}" >> $GITHUB_ENV
          else
            echo "no dependencies with ${LICENSE} license found"
          fi      
          echo "Current Fault Count: ${FAULT_COUNT}"
      - name: Gate on Faults
        ### optional!
        run: |
          echo "Total Fault Count: ${FAULT_COUNT}"
          if [ ${FAULT_COUNT} -gt 0 ] ; then
            echo "Would break here IF enforcing due to ${FAULT_COUNT} total faults detected"
            #exit 1  ### uncomment to enforce
          else
            echo "No Fatal Faults, Continuing..."
          fi          
      - name: Archive SBOM
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json
          retention-days: 14          

