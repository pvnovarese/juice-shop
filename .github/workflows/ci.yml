name: "CI/CD Pipeline"
on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Manual Build'  

      
env:
  ANGULAR_CLI_VERSION: 13
  ANCHORECTL_USERNAME: ${{ vars.ANCHORECTL_USERNAME }}
  ANCHORECTL_PASSWORD: ${{ secrets.ANCHORECTL_PASSWORD }}
  ANCHORECTL_URL: ${{ vars.ANCHORECTL_URL }}
  REGISTRY: ghcr.io
  ### if you want to gate on policy, change this to "true"
  ANCHORECTL_FAIL_BASED_ON_RESULTS: false

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
    
      - name: "Set IMAGE environmental variables"
        run: |
          echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV    
    
      - name: Checkout Code
        uses: actions/checkout@v3        
            
      #### it's not really necessary to build the image every time and it adds about five minutes
            
      #- name: Log in to the Container registry
      #  uses: docker/login-action@v2
      #  with:
      #    registry: ${{ env.REGISTRY }}
      #    username: ${{ github.actor }}
      #    password: ${{ secrets.GITHUB_TOKEN }}     
      #    
      #- name: "Set up QEMU"
      #  uses: docker/setup-qemu-action@v2
      #    
      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v2
      #  
      #- name: build local container
      #  uses: docker/build-push-action@v3
      #  with:
      #    context: .
      #    file: ./Dockerfile
      #    platforms: linux/amd64        
      #    tags: ${{ env.IMAGE }}
      #    push: true
      #    load: false  
      #    build-args: |
      #      VCS_REF=${{ env.VCS_REF }}
      #      BUILD_DATE=${{ env.BUILD_DATE }}
          

  
  scan:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: "Set IMAGE environmental variables"
        run: |
          echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV 
          echo "FAULT_COUNT=0" >> $GITHUB_ENV
      - name: "Install tools"
        run: |
          ### install anchorectl 
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b $HOME/.local/bin
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b $HOME/.local/bin
          export PATH="$HOME/.local/bin/:$PATH"     
      - name: "Generate SBOM"
        run: |
          syft -o json ${IMAGE} > sbom.json
      - name: "Vuln Check"
        # get list of critical vulns and output fixes
        run: | 
          grype -o json --only-fixed sbom:sbom.json | jq '.matches[] | select ( .vulnerability.severity == "Critical" ) | "\(.vulnerability.id) \(.vulnerability.severity) \(.artifact.name) \(.artifact.version) fixed in: \(.vulnerability.fix.versions[])"' | tee matches.txt
          FAULT_COUNT=$(( $FAULT_COUNT + $(wc -l < matches.txt) ))
          echo "FAULT_COUNT=${FAULT_COUNT}" >> $GITHUB_ENV
          echo "Current Fault Count: ${FAULT_COUNT}"
      - name: "GPL License Check"
        run: |
          ### if we want to check for other licenses, just copy this step and change the LICENSE
          LICENSE="GPL" 
          echo "License: ${LICENSE}"
          echo "Fault count: ${FAULT_COUNT}"
          ### debug
          echo "debug"
          cat sbom.json | jq  '.artifacts[] | select ( .type != "deb") | select ( .licenses[] | contains("GPL"))'
          #cat sbom.json | jq '.artifacts[] | select (.type != "deb") | "\(.name) \(.version)"'
          echo "end debug"
          ### selecting for .type != "deb" means we're only looking at language dependencies
          LICENSE_COUNT=$( cat sbom.json | jq --arg LICENSE "${LICENSE}" '[.artifacts[] | select ( .type != "deb") | select ( .licenses[] | index($LICENSE))] | length' )
          if [ ${LICENSE_COUNT} -gt 0 ] ; then
            echo "found ${LICENSE_COUNT} dependencies with ${LICENSE} license:"
            cat sbom.json | jq --arg LICENSE "${LICENSE}" '.artifacts[] | select ( .type != "deb") | select ( .licenses[] | index($LICENSE)) | "\(.name) \(.version)"'
            FAULT_COUNT=$(( $FAULT_COUNT + $LICENSE_COUNT ));
          else
            echo "no dependencies with ${LICENSE} license found"
          fi      
          echo "Current Fault Count: ${FAULT_COUNT}"
          
      - name: Archive SBOM
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json
          retention-days: 14          

